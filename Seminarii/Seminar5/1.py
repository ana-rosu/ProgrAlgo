# Problema candidatului majoritar

# SOL 1
# 칉n prima variant캒 de rezolvare vom calcula direct num캒rul de voturi primite de fiecare
# candidat distinct:
def castigator(voturi):
    for v in set(voturi):
        if voturi.count(v) > len(voturi) // 2:
            return v
    return 0


# Deoarece num캒rul candida탵ilor distinc탵i poate fi cel mult 洧녵, iar metoda count are
# complexitatea maxim캒 洧눩(洧녵), aceast캒 func탵ie va avea complexitatea maxim캒 洧눩(洧녵^2)

# SOL 2
# 칉n a doua variant캒 de rezolvare vom sorta cresc캒tor lista voturi 탳i apoi vom verifica dac캒
# ea con탵ine o secven탵캒 de voturi egale av칙nd lungimea strict mai mare dec칙t n//2:
def castigator(voturi):
    voturi.sort()
    candidat = voturi[0]
    nr_voturi = 1
    for vot in voturi[1:]:
        if vot == candidat:
            nr_voturi = nr_voturi + 1
            if nr_voturi > len(voturi) // 2:
                return candidat
        else:
            candidat = vot
            nr_voturi = 1
    return 0


# Sortarea listei voturi se realizeaz캒 cu complexitatea 洧눩(洧녵 log2 洧녵), iar c캒utarea unei
# secven탵e cu lungimea strict mai mare dec칙t n//2 are complexitatea maxim캒 洧눩(洧녵), deci
# aceast캒 func탵ie va avea complexitatea maxim캒 洧눩(洧녵 log2 洧녵)

# SOL3
# A treia variant캒 de rezolvare se ob탵ine observ칙nd faptul c캒 칥n lista voturilor sortat캒
# cresc캒tor singurul posibil c칙탳tig캒tor este elementul din mijlocul listei, pentru c캒 orice
# secven탵캒 format캒 din cel pu탵in n//2+1 elemente egale trebuie s캒 con탵in캒 탳i elementul de
# pe pozi탵ia n//2:
def castigator(voturi):
    voturi.sort()
    n = len(voturi)
    if voturi.count(voturi[n // 2]) > n // 2:
        return voturi[n // 2]
    return 0


# Sortarea listei voturi se realizeaz캒 cu complexitatea 洧눩(洧녵 log2 洧녵), iar metoda count are
# complexitatea maxim캒 洧눩(洧녵), deci 탳i aceast캒 func탵ie va avea complexitatea maxim캒 tot
# 洧눩(洧녵 log2 洧녵).

# SOL4
def castigator(voturi):
    d = {}
    for v in voturi:
        if v not in d:
            d[v] = 1
        else:
            d[v] += 1
    for v in d:
        if d[v] > len(voturi) // 2:
            return v
    return 0


# Complexitatea computa탵ional캒 a acestei func탵ii este 洧눩(洧녵), deci este optim캒, dar are
# dezavantajul de a utiliza memorie suplimentar캒 (dic탵ionarul). Aten탵ie, dic탵ionarul
# nr_voturi ar putea fi creat 탳i prin nr_voturi = {x: voturi.count(x) for x in
# set(voturi)}, dar complexitatea acestei opera탵ii ar fi 洧눩(洧녵^2)!

# ALGORITMUL BOYER-MOORE
def castigator(voturi):
    avantaj = 0
    majoritar = None
    for v in voturi:
        if avantaj == 0:
            avantaj = 1
            majoritar = v
        elif v == majoritar:
            avantaj += 1
        else:
            avantaj -= 1

    if avantaj == 0:
        return 0
    if voturi.count(majoritar) > len(voturi) // 2:
        return majoritar
    return 0
# Se observ캒 faptul c캒 algoritmul Boyer-Moore rezolv캒 aceast캒 problem캒 칥n mod optim,
# deoarece are complexitatea computa탵ional캒 洧눩(洧녵) 탳i nu folose탳te memorie suplimentar캒!