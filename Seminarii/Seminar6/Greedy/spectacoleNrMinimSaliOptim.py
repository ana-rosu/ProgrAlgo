# Complexitate O(nlog2n) -> priority queue

# In Python, clasa PriorityQueue implementeazƒÉ o coadƒÉ cu prioritƒÉ»õi √Æn care un element trebuie sƒÉ fie un tuplu de forma (ùëùùëüùëñùëúùëüùëñùë°ùëéùë°ùëí, ùë£ùëéùëôùëúùëéùëüùëí)

# get(): furnizeazƒÉ elementul din coadƒÉ care are prioritatea minimƒÉ sau, dacƒÉ existƒÉ mai multe elemente cu prioritate minimƒÉ, pe primul inserat - ùí™(log2 ùëõ)
# put(element): insereazƒÉ √Æn coadƒÉ un element de forma indicatƒÉ mai sus - ùí™(log2 ùëõ)
# empty(): returneazƒÉ True √Æn cazul √Æn care coada nu mai con»õine niciun element sau False √Æn caz contrar -  ùí™(1)
# qsize(): returneazƒÉ numƒÉrul de elemente din coadƒÉ -  ùí™(1)

'''
Vom folosi o coadƒÉ cu prioritƒÉ»õi pentru a memora sƒÉlile utilizate,
prioritatea unei sƒÉli fiind datƒÉ de ora de terminare a ultimului spectacol planificat √Æn ea,
iar spectacolele planificate √Æntr-o salƒÉ vor fi pƒÉstrate folosind o listƒÉ

Astfel, vom extrage sala cu timpul minim de terminare al ultimului
spectacol planificat √Æn ea »ôi vom verifica dacƒÉ spectacolul curent poate fi planificat √Æn sala
respectivƒÉ sau nu (dacƒÉ spectacolul curent nu poate fi planificat √Æn aceastƒÉ salƒÉ, atunci el
nu poate fi planificat √Æn nicio altƒÉ salƒÉ!).

√én caz afirmativ, vom planifica spectacolul curent
√Æn sala respectivƒÉ »ôi √Æi vom actualiza prioritatea la ora de terminare a spectacolului
adƒÉugat.

Altfel vom insera √Æn coadƒÉ o salƒÉ nouƒÉ √Æn care vom planifica spectacolul curent »ôi
prioritatea sƒÉlii va fi egalƒÉ cu ora de terminare a spectacolului respectiv.
'''

import queue

# citim datele de intrare din fi»ôierul text "spectacole.txt"
with open('spectacole.txt') as f:
    lsp = []
    crt = 1
    for line in f:
        aux = line.split('-')
        lsp.append((crt, aux[0].strip(), aux[1].strip()))
        crt += 1

# sortƒÉm spectacolele crescƒÉtor dupƒÉ orele de √Ænceput
lsp.sort(key=lambda t: t[1])

# sƒÉlile vor fi stocate √Æntr-o coadƒÉ cu prioritƒÉ»õi
sali = queue.PriorityQueue()

# planificam primul spectacol in prima sala
sali.put((lsp[0][2], list((lsp[0],))))

# parcurgem restul spectacolelor
for k in range(1, len(lsp)):
    # extragem sala cu ora minima de terminare a ultimului spectacol planificat in ea
    min_timp_final = sali.get()

    # daca spectacolul curent lsp[k] poate fi planificat in sala extrasa, atunci il adaugam in lista
    # spectacolelor planificate in ea si reintroducem sala in coada cu prioritati, dar cu
    # prioritatea actualizata la ora de terminare a spectacolului adaugat
    if lsp[k][1] >= min_timp_final[0]:
        min_timp_final[1].append(lsp[k])
        sali.put((lsp[k][2], min_timp_final[1]))

    # daca spectacolul curent nu poate fi planificat in sala extrasa, atunci
    # reintroducem sala extrasa fara a-i modifica prioritatea si
    # adaugam o sala noua in care planificam spectacolul curent
    else:
        sali.put(min_timp_final)
        sali.put((lsp[k][2], list((lsp[k],))))

# scriem datele de ie»ôire √Æn fi»ôierul text "programare.txt"
with open('programareNrMinimSali.txt','w') as f:
    f.write(f'Numarul minim de sali: {sali.qsize()}\n')
    scrt = 1
    while not sali.empty():
        sala = sali.get()
        f.write('\n Sala'+ str(scrt) + ':\n')
        for sp in sala[1]:
            f.write(f'\t{sp[1]}-{sp[2]} Spectacol {sp[0]} \n')
        scrt += 1

# √Æn fi»ôierul de ie»ôire sƒÉlile vor fi scrise √Æn ordinea prioritƒÉ»õilor, nu √Æn ordinea √Æn care au fost inserate!